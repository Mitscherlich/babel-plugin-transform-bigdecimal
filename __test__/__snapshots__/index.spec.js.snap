// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it works with UpdateExpression 1`] = `
"var maybeJSBD = {
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.remainder(a, b) : a % b;
  },
  pow: function pow(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.pow(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a**b\\", \\"a\\", \\"b\\")(a, b) : Math.pow(a, b);
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.notEqual(a, b) : a !== b;
  }
};

var _x, _y, _x2, _y2, _x3, _y3, _x4, _y4, _x5, _y5, _x6, _y6, _x7, _y7, _x8, _y8, _x9, _y9, _z, _x10, _y10, _z2, _x11, _y11, _z3, _x12, _y12, _z4;

import JSBD from \\"jsbd\\";
const o = {};
o.x = {};
o.x.y = JSBD.BigDecimal(1);
o.x.yz = JSBD.BigDecimal(1);
const y = 'y';
const z = 'z';
const b = JSBD.BigDecimal(1);
_x = o.x, _y = \\"y\\", _x[_y] = maybeJSBD.add(_x[_y], b);
_x2 = o.x, _y2 = 'y', _x2[_y2] = maybeJSBD.add(_x2[_y2], b);
_x3 = o.x, _y3 = y, _x3[_y3] = maybeJSBD.add(_x3[_y3], b);
_x4 = o.x, _y4 = y + z, _x4[_y4] = maybeJSBD.add(_x4[_y4], b);
_x5 = o.x, _y5 = \\"y\\", _x5[_y5] = maybeJSBD.add(_x5[_y5], maybeJSBD.BigDecimal(1));
_x6 = o.x, _y6 = 'y', _x6[_y6] = maybeJSBD.add(_x6[_y6], maybeJSBD.BigDecimal(1));
_x7 = o.x, _y7 = y, _x7[_y7] = maybeJSBD.add(_x7[_y7], maybeJSBD.BigDecimal(1));
_x8 = o.x, _y8 = y + z, _x8[_y8] = maybeJSBD.add(_x8[_y8], maybeJSBD.BigDecimal(1));
_x9 = o.x, _y9 = \\"y\\", _z = _x9[_y9], _x9[_y9] = maybeJSBD.add(_z, maybeJSBD.BigDecimal(1)), _z;
_x10 = o.x, _y10 = 'y', _z2 = _x10[_y10], _x10[_y10] = maybeJSBD.add(_z2, maybeJSBD.BigDecimal(1)), _z2;
_x11 = o.x, _y11 = y, _z3 = _x11[_y11], _x11[_y11] = maybeJSBD.add(_z3, maybeJSBD.BigDecimal(1)), _z3;
_x12 = o.x, _y12 = y + z, _z4 = _x12[_y12], _x12[_y12] = maybeJSBD.add(_z4, maybeJSBD.BigDecimal(1)), _z4;"
`;

exports[`non-strict comparisions are not changed 1`] = `
"var maybeJSBD = {
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.remainder(a, b) : a % b;
  },
  pow: function pow(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.pow(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a**b\\", \\"a\\", \\"b\\")(a, b) : Math.pow(a, b);
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.notEqual(a, b) : a !== b;
  }
};
import JSBD from \\"jsbd\\";
const g = JSBD.BigDecimal(\\".1\\");

if (g == 1) {
  console.log(g);
}

if (g != 1) {
  console.log(g);
}

if (g < 1) {
  console.log(g);
}

if (g > 1) {
  console.log(g);
}

if (g <= 1) {
  console.log(g);
}

if (g >= 1) {
  console.log(g);
}"
`;

exports[`works 1`] = `
"var maybeJSBD = {
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.remainder(a, b) : a % b;
  },
  pow: function pow(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.pow(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a**b\\", \\"a\\", \\"b\\")(a, b) : Math.pow(a, b);
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.notEqual(a, b) : a !== b;
  }
};
import JSBD from \\"jsbd\\";

function f() {
  const x = JSBD.BigDecimal(1);
  return maybeJSBD.add(x, x);
}"
`;

exports[`works when type of variable is changed 1`] = `
"var maybeJSBD = {
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.remainder(a, b) : a % b;
  },
  pow: function pow(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.pow(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a**b\\", \\"a\\", \\"b\\")(a, b) : Math.pow(a, b);
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBD.notEqual(a, b) : a !== b;
  }
};
import JSBD from \\"jsbd\\";
let g1 = 1;
g1 = JSBD.BigDecimal(1);

if (g1 === JSBD.BigDecimal(1)) {
  console.log(g1);
}"
`;
